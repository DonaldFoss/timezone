# Node Timezone

Minimalist time library for Node.js and the browser.

## Synopsis

**FIXME** &mdash; Use `assert` for examples, after you create a test from this.

```javascript
// Import tz function and initialize.
var tz = require("tz").tz;
tz.timezones(require("./zones/northamerica"));

// Parse a UTC date.
y2k = tz("2000/01/01");

// Parse a date offset by a time zone.
bicentenial = tz("1976/07/04", "America/Detroit", "%c");

// Date math accounting for daylight savings time.
ago = tz("6 months ago", "America/Detroit");

// Accounts for leap year.
date = tz(bicentenial, "last year"); 

// Format using UNIX date formats.
moonwalk = tz("1969/06/21 02:36", "%c", "America/Houston");

// Accounts for leap year and DST.
date = tz(bicentenial, "last January", "%c", "America/Detroit");
date = tz("now", "last January", "%c", "America/Detroit");
date = tz(new Date(), "last January", "%c", "America/Detroit");

// Format using a locale.
bicentenial = tz("1989/07/14", "Europe/Paris", "fr_FR", "%c");

// Convert time zones.
bicentenial = tz(tz("1989/07/14", "Europe/Paris"), "America/Detroit", "%c");

// Reduce the noise by creating custom tz functions.
detroit = tz.curry("America/Detroit");
detroit(y2k, "%c");

hamtramck = detroit.curry("pl_PL");
hamtramck(y2k, "%c");
```

Thus, `tz` always returns either milliseconds since the epoch in UTC, or a
formatted string if a format specifier is provided.

## Just In Time Time

Always adjust your dates just in time. Store your dates in UTC. Convert them
when they are displayed. Record events using UTC on the server, not the client.
You cannot trust the client time, you do not know if the clock is set correctly,
you can't keep the user from adjusting it, even you try to account for skew.

UTC timestamps will always indicate a particular second since the epoch.


If you are doing math in hours, minutes, seconds or milliseconds, this will
reflect the UTC time. 

If you are day math, you may land on a daylight savings time shift. If this is
the case, then the last day is treated as 24 hours. Otherwise, if are on a day
at 6:00 PM standard time, and go back six months to the same day, different
month, in daylight savings time, the time will still be 6:00 PM. (Use real
Detroit, Michigan examples.)

@ tz

The namespace.

~ tz(date, offset..., zone, locale)

One function to rule them all and in the darkness bind them.
